<h1>Authentication Required</h1></br>

<div id="firebaseui-container"></div>

<script>
    /**
    * @return {!Object} The FirebaseUI config.
    */
    function getUiConfig() {
    return {
        'callbacks': {
        // Called when the user has been successfully signed in.
        'signInSuccess': function(user, credential, redirectUrl) {
            sendToApi(user.uid);
            return false;
        }
        },
        // Opens IDP Providers sign-in flow in a popup.
        'signInFlow': 'popup',
        'signInOptions': [
        // The Provider you need for your app. We need the Phone Auth
        {
            provider: firebase.auth.PhoneAuthProvider.PROVIDER_ID,
            recaptchaParameters: {
                //size: getRecaptchaMode()
                type: 'image',
                size: 'invisible',
                badge: 'bottomleft'
            },
            defaultCountry: 'PT',
            //loginHint: '+351 900000000'
        }
        ],
        // Terms of service url.
        'tosUrl': 'https://www.google.com'
    };
    };

    // Initialize the FirebaseUI Widget using Firebase.
    var ui = new firebaseui.auth.AuthUI(firebase.auth());
    ui.start('#firebaseui-container', getUiConfig());

    // Listen to change in auth state so it displays the correct UI for when
    // the user is signed in or not.
    firebase.auth().onAuthStateChanged(function(user) {
        user ? handleSignedInUser(user) : handleSignedOutUser();
    });

    function handleSignedInUser(user) {
        console.log(user);
    }

    function handleSignedOutUser() {
        console.log('SignedOutUser');
    }

    function sendToApi(authCredential) {

        $.ajax(
            {
                type: 'POST',
                url: 'api/user/login',
                data: { uid: authCredential },
                dataType : 'json',
                success: (response) => {
                    console.log(response);
                },
                error: (jqXHR, textStatus, errorThrown) => {
                    console.log(textStatus, errorThrown);
                }
            }
        );

    }
</script>